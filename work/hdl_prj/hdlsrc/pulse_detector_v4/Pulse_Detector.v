// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\pulse_detector_v4\Pulse_Detector.v
// Created: 2023-07-02 17:41:51
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// mid_sample                    ce_out        1
// detected                      ce_out        1
// valid_out                     ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Pulse_Detector
// Source Path: pulse_detector_v4/Pulse Detector
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Pulse_Detector
          (clk,
           reset,
           clk_enable,
           data_in_re,
           data_in_im,
           vilid_in,
           ce_out,
           mid_sample,
           detected,
           valid_out);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [7:0] data_in_re;  // sfix16_En14
  input   signed [7:0] data_in_im;  // sfix16_En14
  input   vilid_in;
  output  ce_out;
  output  signed [10:0] mid_sample;  // sfix18_En11
  output  detected;
  output  valid_out;


  wire enb;
  reg signed [7:0] Delay_out1_re;  // sfix16_En14
  reg signed [7:0] Delay_out1_im;  // sfix16_En14
  reg  Delay1_out1;
  wire signed [19:0] filter_out_re;  // sfix40_En37
  wire signed [19:0] filter_out_im;  // sfix40_En37
  wire filter_valid;
  wire signed [10:0] mag_sq_out;  // sfix18_En11
  wire signed [10:0] mid_sample_1;  // sfix18_En11
  wire detected_1;
  reg signed [10:0] Delay2_out1;  // sfix18_En11
  reg  Delay3_out1;
  reg  Delay4_out1;
  reg  [0:1] delayMatch_reg;  // ufix1 [2]
  wire [0:1] delayMatch_reg_next;  // ufix1 [2]
  wire Delay4_out1_1;


  assign enb = clk_enable;

  always @(posedge clk)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1_re <= 16'sb0000000000000000;
        Delay_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_re <= data_in_re;
          Delay_out1_im <= data_in_im;
        end
      end
    end



  always @(posedge clk)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= vilid_in;
        end
      end
    end



  Discrete_FIR_Filter u_Discrete_FIR_Filter (.clk(clk),
                                             .reset(reset),
                                             .enb(clk_enable),
                                             .dataIn_re(Delay_out1_re),  // sfix16_En14
                                             .dataIn_im(Delay_out1_im),  // sfix16_En14
                                             .validIn(Delay1_out1),
                                             .dataOut_re(filter_out_re),  // sfix40_En37
                                             .dataOut_im(filter_out_im),  // sfix40_En37
                                             .validOut(filter_valid)
                                             );

  Compute_Power u_Compute_Power (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .filter_out_re(filter_out_re),  // sfix40_En37
                                 .filter_out_im(filter_out_im),  // sfix40_En37
                                 .Out1(mag_sq_out)  // sfix18_En11
                                 );

  Local_Peak u_Local_Peak (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .mag_sq_out(mag_sq_out),  // sfix18_En11
                           .MidSample(mid_sample_1),  // sfix18_En11
                           .detected(detected_1)
                           );

  always @(posedge clk)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= mid_sample_1;
        end
      end
    end



  assign mid_sample = Delay2_out1;

  always @(posedge clk)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= detected_1;
        end
      end
    end



  assign detected = Delay3_out1;

  always @(posedge clk)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= filter_valid;
        end
      end
    end



  always @(posedge clk)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 1'b0;
        delayMatch_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign Delay4_out1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = Delay4_out1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign valid_out = Delay4_out1_1;

  assign ce_out = clk_enable;

endmodule  // Pulse_Detector

